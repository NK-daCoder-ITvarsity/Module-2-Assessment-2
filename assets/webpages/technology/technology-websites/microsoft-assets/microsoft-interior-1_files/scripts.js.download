(()=>{

    if (ms_uhf_data.settings == '' && ms_uhf_data.network_settings == '') {
        // console.log('UHF Cookies â€“ ms_uhf_data.settings is empty')
        return
    }

    let settings = {services: []};

    if (ms_uhf_data.settings) {
        try {
            let {services} = JSON.parse(ms_uhf_data.settings);
            settings.services = [...settings.services, ...services];
        }
        catch (e)  {
            // console.log('UHF Cookies plugin::', 'error while parsing settings:', e);
        } 
    }

    if (ms_uhf_data.network_settings) {
        // console.log('UHF_NETWORK_SETTINGS', JSON.parse(ms_uhf_data.network_settings));
        let {services} = JSON.parse(ms_uhf_data.network_settings);
        settings.services = [...settings.services, ...services];
    }

    // decoding base64 js code for services (in any) 
    settings?.services?.forEach(service => {
        if (service.code) {
            service.code = atob(service.code);
        }
    });
    // console.log('UHF Cookies plugin::', '___PARSING SERVICES___', settings);


    // console.log('UHF Cookies plugin::', "__Cookies_settings__ :", settings);

    const EXP_DATE   = `Thu, 01 Jan 1970 00:00:01 GMT`;

    // console.log('UHF Cookies plugin::', 'Wait for user consent...', window.WcpConsent, window.siteConsent)
    
    const appendScript = (id, scriptContent) => {
        const cleanedID = id.replace(/\s/g,'-').toLowerCase() + '-script'
        if (document.getElementById(cleanedID)) return
        // console.log('UHF Cookies plugin::', 'appendScript', {id, cleanedID, scriptContent});
        const $script = document.createElement('script');
        $script.setAttribute('type', 'text/javascript');
        $script.setAttribute('id', cleanedID);
        $script.innerHTML = scriptContent
        document.body.appendChild( $script )
    }

    const removeCookie = (name, domains) => {
        // console.log('UHF Cookies plugin::', 'removeCookie ?', {name, domains})
        document.cookie.split(';').forEach( cookieStr => {
            const cookieName  = cookieStr.split('=')[0].trim();
            if ( cookieName === name) {
                domains.forEach(domain => {
                    // console.log('UHF Cookies plugin::', 'removeCookie: ',`${cookieName}=;expires=${EXP_DATE};path=/;domain=${domain};`)
                    document.cookie = `${cookieName}=;expires=${EXP_DATE};path=/;domain=${domain};`
                })
            }
        })
    }

    const checkServices = (savedCategories) => {
        // console.log('UHF Cookies plugin::', "checkServices", {userConsents: savedCategories, services: settings.services});
        settings.services.forEach( service => {
            const name    = service.name;
            const cookies = service.cookies.split('\n');
            const domains = service.domains.split('\n');
            const code    = service.code;
            const categories = service.categories;
            if (!savedCategories) {
                // console.log('UHF Cookies plugin::', 'NO CONSENT SCRIPT, REMOVING ANY FOUDN SERVICES', {name, cookies, domains, categories, code})
                cookies.forEach( c => removeCookie(c, domains) );
            }
            else {
                // console.log('UHF Cookies plugin::', 'check service', savedCategories, name, cookies, domains, categories, code)
                let hasMisMatch = false
                for (let k in categories) {
                    if ( categories[k] && !savedCategories[k] ) {
                        // console.log('UHF Cookies plugin::', ' -> MISMATCH ! cat ', k, categories[k], ' != ', savedCategories[k] )
                        hasMisMatch = true;
                        cookies.forEach( c => removeCookie(c, domains) );
                    }
                    else {
                        // console.log('UHF Cookies plugin::', ' ->  OK cat.', k+':'+categories[k], ' | savedCategories.'+k+':', savedCategories[k] )
                    }
                }
                if (!hasMisMatch && service.code) {
                    appendScript(service.name, service.code);
                }
            }
        })
    }

    /* Setup cookies when UHF callback is available */
    const checkUserConsent = (userConsents) => {
        if ( !window.siteConsent ) {
            // console.log('Error: missing window.siteConsent, but window.WcpConsent found:', userConsents);
            checkServices( userConsents );
            return
        }
        const savedCategories = siteConsent.getConsent();
        checkServices( savedCategories );
    }
    

    if (!window.WcpConsent || window.GPC_DataSharingOptIn === void 0){//} || !window.siteConsent) {
        // console.log('UHF Cookies plugin::', 'Missing window.WcpConsent OR window.GPC_DataSharingOptIn, continue without saved services', window.WcpConsent, window.siteConsent );
        setTimeout(function(){
            // console.log('UHF Cookies plugin::', 'Cookies timeout after 2s, check service...' );
            checkServices( null );
        }, 2000);
    }
    else {
        WcpConsent.onInitCallback(checkUserConsent);
        WcpConsent.onConsentChanged(checkUserConsent);
    }

})()